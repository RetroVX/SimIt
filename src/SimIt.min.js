export default class SimIt{constructor(element){this.element=element||window||document}async all(sequence,onStart,onComplete){null==onStart&&(onStart=function(){}),null==onComplete&&(onComplete=function(){}),onStart(sequence);const length=sequence.length;let stepCounter=0;for(let step of sequence)stepCounter++,await this._checkEvent(step),stepCounter===length&&onComplete(sequence)}async repeat(step,amount,delay){null==amount&&(amount=1),null==delay&&(delay=0);for(let i=0;i<amount;i++)await this.sleep(delay),await this._checkEvent(step)}sleep(ms){return new Promise(resolve=>setTimeout(resolve,ms))}click(x,y){return this.element.dispatchEvent(new MouseEvent("click",{clientX:x||0,clientY:y||0}))}keydown(key){return this.element.dispatchEvent(new KeyboardEvent("keydown",{key:key||void 0}))}keyup(key){return this.element.dispatchEvent(new KeyboardEvent("keyup",{key:key||void 0}))}keypress(key){return this.element.dispatchEvent(new KeyboardEvent("keypress",{key:key||void 0}))}setElement(element){return this.element=element,this}async _checkEvent(obj){obj.keydown?this.keydown(obj.keydown):obj.keyup?this.keyup(obj.keyup):obj.keypress?this.keypress(obj.keypress):obj.click?this.click(obj.click.x,obj.click.y):obj.sleep?await this.sleep(obj.sleep):obj.callback?await obj.callback():obj.repeat&&await this.repeat(obj.repeat.event,obj.repeat.amount,obj.repeat.delay)}}